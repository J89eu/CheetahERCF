# Pressure Advance calibration macros.
#
# These macros assist with calibrating pressure advance using Klipper.  They will produce *two*
# k-factor lines test (similar to https://realdeuce.github.io/Voron/PA/pressure_advance.html) but
# can be dialed in and configured for your printer so that only a few parameters need to be set
# when calibrating pressure advance.  One set of lines will be drawn on the left half of the 
# bed (the side < half of X), and the other on the right side (the side > half of X).  The print
# will pause after the first set and wait for you to continue before printing the second.
#
# To install this file, upload it to the appropriate place for your printer and include it in your printer.cfg file.
#
# Usage: You will issue two macros, PA_CAL_START and PA_CAL_FINISH.  Inbetween -- after PA_CAL_START
# is done -- you will inspect the first set of lines to determine which values to pass to PA_CAL_FINISH.
#
# To start calibration, issue:
#   PA_CAL_START BED=100 EXTRUDER=240 
#   
#   (adjust the parameters as necessary. You can also specify START and MAX values if you want to change
#   from the default 0.0-0.1 range for the first test)
#
# Once the lines are drawn, count the number of lines (remember to count the very bottom line as line 0!) to
# the best PA value you like.  Multiply that value by the step factor (0.005 if you used the default range) to
# determine the midpoint value for PA.  Then, run
#
#   PA_CAL_FINISH START=midpoint-0.01 MAX=midpoint+0.01
#
#   (replacing 'midpoint' with your midpoint value. So if your midpoint value was 0.045, you would run
#   PA_CAL_FINISH START=0.035 MAX=0.055)
#
# Once the second print is finished, count the lines (bottom line is line 0!), multiply by the PA step size,
# which would be 0.001 unless you used different values for the range, and add the START value (in the above case, 0.035).
# The resulting value is your new PA.
#
# Each test prints 1 more line than the number of lines specified by NUM_LINES (default 20).
# 
# Thanks to https://github.com/rkolbi/voron2.4/blob/main/PA_CAL-V1 for the original
# Thanks to https://github.com/simplisticton/common-macros/blob/main/pa_calibration.cfg for their version
# 
# Current version done by sarchar#5590
[gcode_macro PA_CAL_START]
variable_retraction: 0.2            ; in mm, retraction distance settable with the RETRACTION macro parameter
variable_retraction_speed: 20       ; in mm/s, retraction speed settable with the RETRACTION_SPEED macro parameter
variable_slow_speed: 20             ; in mm/s, speed of the slow parts of the line
variable_fast_speed: 80             ; in mm/s, speed of the fast parts of the line
variable_slow_line_length: 20       ; in mm, length of the slow parts of the line
variable_fast_line_length: 40       ; in mm, length of the fast parts of the line
variable_travel_speed: 475          ; in mm/s, speed of nozzle travel when not printing
variable_acceleration: 3000         ; in mm/s^2, your machine's acceleration
variable_layer_height: 0.25         ; in mm, the height of the test layer
variable_line_spacing: 5            ; in mm, space between PA test lines
variable_extrusion_multiplier: 0.95 ; usually less than 1, around 0.95 for PLA and 0.92 for ABS.
variable_draw_anchor_frame: 1       ; set to 0 to disable the anchor frame
variable_filament_diameter: 1.75    ; in mm
variable_nozzle_size: 0.4           ; in mm
description: Print the first set of lines to calibrate pressure advance. Run PA_CAL_FINISH to print a second set, or you can cancel your print.
gcode:
    {% set BED = params.BED|default(65) |float %}
    {% set HOTEND = params.HOTEND|default(210) |float %}
    {% set PA_START = params.START|default(0) |float %}
    {% set PA_MAX = params.MAX|default(".1") |float %}
    {% set NUM_LINES = params.NUM_LINES|default("20")|int %}

    ; Overwrite some parameters
    {% set retraction = params.RETRACTION|default(retraction)|float %}
    {% set retraction_speed = params.RETRACTION_SPEED|default(retraction_speed)|float %}

    ; Tell the user we're starting
    {% set PA_FACTOR = (PA_MAX - PA_START) / NUM_LINES |float %}
    { action_respond_info("Starting PA Calibration with BED=%.0f EXTRUDER=%.0f START=%.3f MAX=%.3f PA_FACTOR=%.5f NOZZLE_SIZE=%02f" % (BED,EXTRUDER,PA_START,PA_MAX,PA_FACTOR,nozzle_size)) }

    ; start the print
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"] |float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"] |float %}
    PRINT_START BED={BED} EXTRUDER={EXTRUDER} CHAMBER=15 AREA_START_X=0 AREA_START_Y=0 AREA_END_X={max_x} AREA_END_Y={max_y}

    ; wait for temps
    M190 S{BED}
    M109 S{EXTRUDER}

    G21        ; Millimeter units
    G90        ; Absolute XYZ
    M83        ; Relative E
    G92 E0     ; Reset extruder position
    M106 S0    ; Turn off fan

    ; set velocity
    SET_VELOCITY_LIMIT ACCEL={acceleration} ACCEL_TO_DECEL={acceleration/2.0|int}

    ; divide the bed into 2 halfs, and print the first test on the left half 
    {% set half_x = max_x / 2.0 %}
    {% set mid_x = half_x / 2.0 %}
    _PA_CAL PA_START={PA_START} PA_MAX={PA_MAX} NUM_LINES={NUM_LINES} MIN_X=0 MID_X={mid_x} MAX_X={half_x}

    ; Move to back of the bed to allow inspection of the lines
    G0 Z1 F300                                ; lift before travel
    G1 E{-retraction} F{retraction_speed*60}  ; retract
    G0 Y{max_y-10} X{half_x} F6000            ; move

    ; Tell user we're done and what they need to do to continue
    M118 Find the best line number (start counting at 0), multiply by {PA_FACTOR}, and add {PA_START}. Then call PA_CAL_FINISH START=your_value-0.01 MAX=your_value+0.01

[gcode_macro PA_CAL_FINISH]
description: Print the second set of lines to calibrate pressure advance and terminate the print
gcode:
    {% set PA_START = params.START|float %}
    {% set PA_MAX = params.MAX|float %}
    {% set NUM_LINES = params.NUM_LINES|default(20)|int %}

    ; Grab some globals
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"] |float %}
    {% set nozzle_size = printer["gcode_macro PA_CAL_START"].nozzle_size %}
    {% set layer_height = printer["gcode_macro PA_CAL_START"].layer_height %}
    {% set filament_diameter = printer["gcode_macro PA_CAL_START"].filament_diameter %}
    {% set extrusion_multiplier = printer["gcode_macro PA_CAL_START"].extrusion_multiplier %}
    {% set slow_speed = printer["gcode_macro PA_CAL_START"].slow_speed %}
    {% set travel_speed = printer["gcode_macro PA_CAL_START"].travel_speed %}

    ; clean nozzle before printing the next as we've likely been oozing
    clean_nozzle

    ; determine size of the dividing line
    {% set pi = 3.14159265 %}
    {% set div_line_width  = 1.125 * nozzle_size %}       ; default perimeter width from SuperSlicer
    {% set div_line_length = max_y*2.0/3.0 %}             ; length of the dividing line
    {% set div_line_area   = (div_line_width - layer_height)*layer_height + pi * (layer_height * layer_height) / 4.0 %}
    {% set div_line_e      = div_line_area * div_line_length * 4.0 / (pi * filament_diameter * filament_diameter * extrusion_multiplier) %}

    ; print the dividing line
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"] |float %}
    {% set half_x = max_x / 2.0 %}
    G0 X{half_x} Y{max_y*5.0/6.0} F{travel_speed*60}     ; move to the start of the prime line
    G0 Z{layer_height} F300                              ; lower Z
    G1 Y{max_y*(1.0/6.0)} E{div_line_e} F{slow_speed*60} ; print the line
    G0 Z{layer_height*2} F300                            ; raise Z

    ; divide the bed into 2 halfs, and print the first lines on the right half 
    {% set mid_x = half_x + half_x / 2.0 %}
    {% set min_x = half_x %}
    _PA_CAL PA_START={PA_START} PA_MAX={PA_MAX} NUM_LINES={NUM_LINES} MIN_X={min_x} MID_X={mid_x} MAX_X={max_x}

    ; Finished!
    {% set PA_FACTOR = (PA_MAX - PA_START) / NUM_LINES |float %}
    M118 Find the best line (start counting at 0), multiply by {PA_FACTOR}, and add {PA_START}.

    ; done
    G1 E{-retraction} F{retraction_speed*60}                    ; final retract before finishing
    PRINT_END

[gcode_macro _PA_CAL]
gcode:
    {% set pi = 3.14159265 %}

    {% set max_x = params.MAX_X|float %}
    {% set mid_x = params.MID_X|float %}
    {% set min_x = params.MIN_X|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"] |float %}
    {% set mid_y = max_y / 2.0 %}

    ; Set up parameters
    {% set PA_START = params.PA_START|default(0) |float %}
    {% set PA_MAX = params.PA_MAX|default(".1") |float %}
    {% set NUM_LINES = params.NUM_LINES|default("20")|int %}

    ; Get PA globals
    {% set nozzle_size = printer["gcode_macro PA_CAL_START"].nozzle_size %}
    {% set retraction = printer["gcode_macro PA_CAL_START"].retraction %}
    {% set retraction_speed = printer["gcode_macro PA_CAL_START"].retraction_speed %}
    {% set slow_speed = printer["gcode_macro PA_CAL_START"].slow_speed %}
    {% set fast_speed = printer["gcode_macro PA_CAL_START"].fast_speed %}
    {% set slow_line_length = printer["gcode_macro PA_CAL_START"].slow_line_length %}
    {% set fast_line_length = printer["gcode_macro PA_CAL_START"].fast_line_length %}
    {% set travel_speed = printer["gcode_macro PA_CAL_START"].travel_speed %}
    {% set layer_height = printer["gcode_macro PA_CAL_START"].layer_height %}
    {% set line_spacing = printer["gcode_macro PA_CAL_START"].line_spacing %}
    {% set extrusion_multiplier = printer["gcode_macro PA_CAL_START"].extrusion_multiplier %}
    {% set filament_diameter = printer["gcode_macro PA_CAL_START"].filament_diameter %}
    {% set draw_anchor_frame = printer["gcode_macro PA_CAL_START"].draw_anchor_frame %}

    ; Calculate PA step size
    {% set PA_FACTOR = (PA_MAX - PA_START) / NUM_LINES |float %}

    {% if (PA_FACTOR <= 0) %}
	    {action_raise_error("PA_FACTOR must be > 0!")}
    {% endif %}

    ; Calculate extrusion amounts
    {% set frame_line_width  = 1.125 * nozzle_size %}              ; default perimeter width from SuperSlicer
    {% set frame_line_length = (NUM_LINES+3)*line_spacing %}  ; length of the anchor line
    {% set frame_line_area   = (frame_line_width - layer_height)*layer_height + pi * (layer_height * layer_height) / 4.0 %}
    {% set frame_line_e      = frame_line_area * frame_line_length * 4.0 / (pi * filament_diameter * filament_diameter * extrusion_multiplier) %}

    ; amounts to extrude for the slow and fast parts of the line
    {% set test_line_width  = 1.05 * nozzle_size %}               ; default external width from SuperSlicer
    {% set test_line_area   = (test_line_width - layer_height)*layer_height + pi * (layer_height * layer_height) / 4.0 %}
    {% set slow_line_e      = test_line_area * slow_line_length * 4.0 / (pi * filament_diameter * filament_diameter * extrusion_multiplier) %}
    {% set fast_line_e      = test_line_area * fast_line_length * 4.0 / (pi * filament_diameter * filament_diameter * extrusion_multiplier) %}

    ; amounts to extrude for the speed markers
    {% set mark_line_width  = 1.2 * nozzle_size %}               ; thicker than perimeter lines
    {% set mark_line_length = 20 %}
    {% set mark_line_area   = (mark_line_width - layer_height)*layer_height + pi * (layer_height * layer_height) / 4.0 %}
    {% set mark_line_e      = mark_line_area * mark_line_length * 4.0 / (pi * filament_diameter * filament_diameter * extrusion_multiplier) %}
    
    ; Determine starting X
    {% set x_start = mid_x - (fast_line_length / 2.0 + slow_line_length) | float %}
    {% set x_frame_start = x_start - 2.0*frame_line_width | float %}
    {% set x_p1 = x_start + slow_line_length | float %}
    {% set x_p2 = x_p1 + fast_line_length | float %}
    {% set x_p3 = x_p2 + slow_line_length | float %}
    {% set x_frame_end = x_p3 + 2.0*frame_line_width | float %}
    
    ; bottom-left of the anchor frame: plus 1 line for the final pa line, plus two more fake lines for the top and bottom of the frame
    {% set y_base = mid_y - (NUM_LINES + 3) * line_spacing / 2.0 - 30 %}  ; 20 extra for the mark lines, and 10 for the separation on those

    ; Check if our print exceeds the boundary of the print area
    {% if (x_frame_start < min_x)  %}
	    {action_raise_error("X axis start position too far left")}
    {% endif %}

    {% if (x_frame_end >= max_x)  %}
	    {action_raise_error("X axis end position too far right")}
    {% endif %}

    {% if (y_base < 0)  %}
	    {action_raise_error("Y axis start less than 0!")}
    {% endif %}

    {% if ((y_base + (NUM_LINES + 3)*line_spacing) >= max_y)  %}
	    {action_raise_error("Y axis end exceeds printer size!")}
    {% endif %}

    ; Draw anchor frame if wanted
    {% if draw_anchor_frame %}
        ; Draw left anchor frame
        G0 X{x_start-frame_line_width/2.0} Y{y_base} F{travel_speed*60}  ; move to the start
        G0 Z{layer_height} F300                                          ; Set layer height
        G1 Y{y_base+frame_line_length} E{frame_line_e} F{slow_speed*60}  ; print one line
        G0 X{x_start-(1.5*frame_line_width)} F{travel_speed*60}          ; move left for the next line
        G1 Y{y_base} E{frame_line_e} F{slow_speed*60}                    ; print second line
        ;G0 Z{layer_height*2.0} F300                                      ; lift before travel

        ; Draw right anchor frame
        G1 E{-retraction} F{retraction_speed*60}                         ; retract before travel
        G0 X{x_start+slow_line_length*2+fast_line_length-frame_line_width/2.0} Y{y_base} F{travel_speed*60} ; move to the start
        ;G0 Z{layer_height} F300                                         ; Set layer height
        G1 E{retraction} F{retraction_speed*60}                          ; unretract
        G1 Y{y_base+frame_line_length} E{frame_line_e} F{slow_speed*60}  ; print one line
        G0 X{x_start+slow_line_length*2+fast_line_length+frame_line_width/2.0} F{travel_speed*60} ; move right some
        G1 Y{y_base} E{frame_line_e} F{slow_speed*60}                    ; print second line
        G0 Z{layer_height*2.0} F300                                      ; lift before travel
    {% endif %}

    ; Draw the test lines!
    {% for i in range(NUM_LINES+1) %}
        SET_PRESSURE_ADVANCE ADVANCE={PA_START + i*PA_FACTOR} ; set Pressure Advance
        M117 {i}: Testing Pressure Advance at: {PA_START + i*PA_FACTOR}
        M118 {i}: Testing Pressure Advance at: {PA_START + i*PA_FACTOR}
        G0 X{x_start} Y{y_base+line_spacing*(i + 1)} F{travel_speed*60}      ; move to start position
        G0 Z{layer_height} F300                               ; move to layer height
        G1 E{retraction} F{retraction_speed*60}               ; un-retract
        G1 X{x_p1} E{slow_line_e} F{slow_speed*60}            ; print line part one
        G1 X{x_p2} E{fast_line_e} F{fast_speed*60}            ; print line part two
        G1 X{x_p3} E{slow_line_e} F{slow_speed*60}            ; print line part three
        G1 E{-retraction} F{retraction_speed*60}              ; retract
        ; TODO try without this Z-lift
        ;G0 Z{layer_height*4} F300                             ; Move above layer height  
    {% endfor %}

    ; Draw the mark lines
    G1 E{-retraction} F{retraction_speed*60}                    ; retract before travel
    ;G0 Z{layer_height*2} F300                                   ; lift before travel
    G0 X{x_start+slow_line_length} Y{y_base+(NUM_LINES+3)*line_spacing+10} F{travel_speed*60} ; move to the start of the first mark
    G0 Z{layer_height} F300                                     ; lower nozzle
    G1 E{retraction} F{retraction_speed*60}                     ; unretract
    G1 Y{y_base+(NUM_LINES+3)*line_spacing+30} F{slow_speed/2.0*60} ; print the mark
    G1 E{-retraction} F{retraction_speed*60}                    ; retract before travel
    G0 X{x_start+slow_line_length+fast_line_length} Y{y_base+(NUM_LINES+3)*line_spacing+10} F{travel_speed*60} ; move to the start of the second mark
    G1 E{retraction} F{retraction_speed*60}                     ; unretract
    G1 Y{y_base+(NUM_LINES+3)*line_spacing+30} F{slow_speed/2.0*60} ; print the mark

