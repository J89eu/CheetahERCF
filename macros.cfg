[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

######################## PRINT START/END #########################

[gcode_macro PRINT_START]
gcode:

    {% set BED = params.BED|int %}
    {% set HOTEND = params.HOTEND|int %}
    {% set CHAMBER = params.CHAMBER|default(0)|int %}

    CLEAR_PAUSE
    M104 S140															                                ; set hotend to no-ooze temp
    M190 S{BED}                                                                                         ; Set bed temp
    STATUS_HOMING
    G28                                                                                                 ; home
    ATTACH_PROBE_LOCK
    G90                                                                                                 ; absolute positioning
    STATUS_HEATING
    TEMPERATURE_WAIT SENSOR="temperature_sensor enclosure_temp" MINIMUM={CHAMBER}
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL                                                                                   ; QGL
    G28 Z																								; home z
	G90 													 											; absolute positioning
    STATUS_MESHING
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    G28 Z																								; home z again
    Dock_Probe_Unlock
    Smart_Park
    M109 S{HOTEND}                                                                                      ; wait for hotend temp
    G92 E0                              																; reset Extruder
	G1 Z2.0 F3000                       																; move Z Axis up
    VORON_PURGE    
    #SET_FILAMENT_SENSOR SENSOR=above_extruder ENABLE=1
    STATUS_BUSY

[gcode_macro PRINT_END]
gcode:
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    #SET_FILAMENT_SENSOR SENSOR=above_extruder ENABLE=0											; disable filament sensor
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X115 Y300 F3600            ; park nozzle at rear
    {% if unload|int == 1%}
    MMU_EJECT
    {% endif %}
    TURN_OFF_HEATERS
    BED_MESH_CLEAR
    STATUS_READY
    M117 Complete
  

[gcode_macro BED_MESH_LOAD]
description: Load an existing mesh or generate a new one
gcode:
  ##### get target get temperature #####
  {% set bed_temp = printer.heater_bed.target|int %}
  ##### join everything to a single mesh name #####
  {% set mesh_name = "Bed_Temp-" + bed_temp|string + "C" %}
  ##### end of definitions #####
  {% if printer.configfile.config["bed_mesh " + mesh_name] is defined %}
    M117 Loaded Old Mesh
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD={mesh_name}
  {% else %}
    M117 Creating New Mesh
    BED_MESH_CALIBRATE PROFILE={mesh_name}
    {action_respond_info("Run SAVE_CONFIG after the print to store the mesh")}
  {% endif %}

[gcode_macro NEW_MESH]
description: Create new bed mesh at current target bed temperature
gcode:
 ##### get target get temperature #####
  {% set bed_temp = printer.heater_bed.target|int %}
  {% set mesh_name = "Bed_Temp-" + bed_temp|string + "C" %}
  M117 Waiting Bed Temp
  M190 S{bed_temp}
  M117 Waiting 15 Mins
  G4 P900000
  M117 Home and Z Tilt
  G32
  M117 Creating New Mesh
  BED_MESH_CALIBRATE PROFILE={mesh_name}
  M117 Saving Bed Mesh {mesh_name}
  SAVE_CONFIG

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    BED_MESH_LOAD
    G0 X150 Y150 Z30 F3600


######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
	SDCARD_RESET_FILE
    _MMU_PARK Z_HOP=20
    _MMU_CLEAR_POSITION
    CLEAR_PAUSE
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
description: Pause the print and park
gcode:
    {% if printer.pause_resume.is_paused %}
        RESPOND MSG="Print is already paused"
    {% else %}
        {% if printer.extruder.can_extrude %}
            G92 E0
            G1 E-1.0 F1500.0		# Retract a little to reduce ooze
        {% endif %}
        BASE_PAUSE
        _MMU_PARK
    {% endif %}
    
[gcode_macro RESUME]
rename_existing: BASE_RESUME
description: Resume the print
gcode:
    {% if not printer.pause_resume.is_paused %}
        RESPOND MSG="Print is not paused. Resume ignored"
    {% else %}
        # Good place to add other things like purging or nozzle cleaning
        BASE_RESUME
    {% endif %}


######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Move toolhead diagnonally to max Z and back. For "settling in" after tinkering with Z

[gcode_macro EXERCISE]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	
	SAVE_GCODE_STATE NAME=EXERCISE
	CG28
	G90                               ; absolute positioning
	G0 X175 Y10 Z5 F19500
	{% for wipe in range(i|int) %}
		#Fast up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			;G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F19500
			;M105                     ; keepalive (temp report)
		{% endfor %}
		#Slow up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F900
			M105                     ; keepalive (temp report)
		{% endfor %}
	{% endfor %}
	M106 S0                          ; disable fan
	RESTORE_GCODE_STATE NAME=EXERCISE
	
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro OFF]
gcode:
	M84												; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off